import os
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Dropout, InputLayer
from spektral.layers import GCNConv, GlobalSumPool, GlobalAvgPool, GlobalMaxPool
from tensorflow.keras.layers import Dense
from tensorflow.keras import regularizers



# Allocate extra memory in the GPU for storing tensors
gpu_options = tf.compat.v1.GPUOptions(per_process_gpu_memory_fraction=0.66)
sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(gpu_options=gpu_options))



class APTGNN(Model):
    def __init__(self):
        super().__init__()
        self.graph_conv_1 = GCNConv(934, activation='relu')
        self.dropout_1 = Dropout(0.5)
        self.pool1 = GlobalAvgPool()
        self.dense_1 = Dense(2024, 'relu', regularizers.l2(l2=1e-4))
        self.dense_2 = Dense(2024, 'relu', regularizers.l2(l2=1e-4))
        self.dropout_2 = Dropout(0.5)
        self.dense_3 = Dense(2024, 'relu', regularizers.l2(l2=1e-4))
        self.dense_4 = Dense(2024, 'relu', regularizers.l2(l2=1e-4))
        self.dropout_3 = Dropout(0.5)
        self.dense_5 = Dense(2024, 'relu', regularizers.l2(l2=1e-4))
        self.dense_6 = Dense(2024, 'relu', regularizers.l2(l2=1e-4))
        self.dropout_4 = Dropout(0.5)
        self.dense_7 = Dense(10, 'softmax')
    
    def call(self, inputs):
        x, a, i = inputs
        out = self.graph_conv_1([x, a])
        out = self.dropout_1(out)
        pool1 = self.pool1(out)  
        out = self.dense_1(pool1)
        out = self.dense_2(out)
        out = self.dropout_2(out)
        out = self.dense_3(out)
        out = self.dense_4(out)
        out = self.dropout_3(out)
        out = self.dense_5(out)
        out = self.dense_6(out)
        out = self.dropout_4(out)
        out = self.dense_7(out)

        return out



class BinaryGNN(Model):
    def __init__(self):
        super().__init__()
        self.graph_conv_1 = GCNConv(775, activation='relu')
        self.dropout_1 = Dropout(0.75)
        self.pool1 = GlobalAvgPool()
        self.dense_1 = Dense(64, 'relu', regularizers.l2(l2=2e-4))
        self.dense_2 = Dense(64, 'relu', regularizers.l2(l2=2e-4))
        self.dropout_2 = Dropout(0.75)
        self.dense_3 = Dense(64, 'relu', regularizers.l2(l2=2e-4))
        self.dense_4 = Dense(64, 'relu', regularizers.l2(l2=2e-4))
        self.dropout_3 = Dropout(0.75)
        self.dense_5 = Dense(64, 'relu', regularizers.l2(l2=2e-4))
        self.dense_6 = Dense(64, 'relu', regularizers.l2(l2=2e-4))
        self.dropout_4 = Dropout(0.75)
        self.dense_7 = Dense(2, 'softmax')
    
    def call(self, inputs):
        out = self.graph_conv_1(inputs)
        out = self.dropout_1(out)
        pool1 = self.pool1(out)  
        out = self.dense_1(pool1)
        out = self.dense_2(out)
        out = self.dropout_2(out)
        out = self.dense_3(out)
        out = self.dense_4(out)
        out = self.dropout_3(out)
        out = self.dense_5(out)
        out = self.dense_6(out)
        out = self.dropout_4(out)
        out = self.dense_7(out)

        return out



class BinaryDNN(Model):
    def __init__(self):
        super().__init__()
        self.input_values = InputLayer(input_shape=(1, 23))
        self.dense_1 = Dense(100, 'relu')
        self.dense_2 = Dense(100, 'relu')
        self.dropout_1 = Dropout(0.25)
        self.dense_3 = Dense(100, 'relu')
        self.dense_4 = Dense(100, 'relu')
        self.dense_5 = Dense(100, 'relu')
        self.dropout_2 = Dropout(0.5)
        self.dense_6 = Dense(100, 'relu')
        self.dense_7 = Dense(2, 'softmax')
    
    def call(self, inputs):
        out = self.input_values(inputs)
        out = self.dense_1(out)
        out = self.dense_2(out)
        out = self.dropout_1(out)
        out = self.dense_3(out)
        out = self.dense_4(out)
        out = self.dense_5(out)
        out = self.dropout_2(out)
        out = self.dense_6(out)
        out = self.dense_7(out)

        return out



class TrivialDNN(Model):
    def __init__(self):
        super().__init__()
        self.input_values = InputLayer(input_shape=(1, 23))
        self.dense_1 = Dense(2024, 'relu')
        self.dense_2 = Dense(2024, 'relu')
        self.dense_3 = Dense(2, 'softmax')
    
    def call(self, inputs):
        out = self.input_values(inputs)
        out = self.dense_1(out)
        out = self.dense_2(out)
        out = self.dense_3(out)

        return out