import angr
from angrutils import *
import networkx as nx
import numpy as np
import os
import scipy
import gc
import logging



# Logging settings
logging.getLogger('angr.analyses').setLevel('CRITICAL')
logging.getLogger('pyvex.lifting.libvex').setLevel('CRITICAL')

# What family the group of binaries is apart of 
file_family = 0
# The directory containing the binaries
directory_name = "../project/data/APTMalware/samples/APT30/"
directory = os.fsencode(directory_name)
# The file where you will save the data
save_file_location = "../project/data/APT30.txt"

# x86 instuction set
in_set = {'aaa': 0, 'aad': 1, 'aam': 2, 'aas': 3, 'adc': 4, 'adcs': 5,
        'add': 6, 'addiu': 7, 'addp': 8, 'addpd': 9, 'addps': 10, 'adds': 11,
        'addsd': 12, 'addss': 13, 'addu': 14, 'adr': 15, 'adrp': 16,
        'aesdec': 17, 'aesdeclast': 18, 'aesenc': 19, 'aesenclast': 20,
        'aesimc': 21, 'aeskeygenassist': 22, 'and': 23, 'andi': 24,
        'andnpd': 25, 'andnps': 26, 'andpd': 27, 'andps': 28, 'ands': 29,
        'arpl': 30, 'asr': 31, 'b': 32, 'b.al': 33, 'b.eq': 34, 'b.ge': 35,
        'b.gt': 36, 'b.hi': 37, 'b.hs': 38, 'b.le': 39, 'b.lo': 40, 'b.ls': 41,
        'b.lt': 42, 'b.mi': 43, 'b.ne': 44, 'b.nv': 45, 'b.vc': 46, 'b.vs': 47,
        'bal': 48, 'ball': 49, 'beq': 50, 'beql': 51, 'beqz': 52, 'bfi': 53,
        'bfxil': 54, 'bgez': 55, 'bgtz': 56, 'bic': 57, 'bics': 58, 'bl': 59,
        'blez': 60, 'blr': 61, 'bltz': 62, 'bnd': 63, 'bne': 64, 'bnel': 65,
        'bnez': 66, 'br': 67, 'break': 68, 'brk': 69, 'bsf': 70, 'bsl': 71,
        'bsr': 72, 'bswap': 73, 'bt': 74, 'btc': 75, 'btr': 76, 'bts': 77,
        'call': 78, 'cbnz': 79, 'cbw': 80, 'cbz': 81, 'cdq': 82, 'cdqe': 83,
        'cinc': 84, 'clc': 85, 'cld': 86, 'clflush': 87, 'cli': 88, 'clts': 89,
        'clz': 90, 'cmc': 91, 'cmn': 92, 'cmova': 93, 'cmovae': 94,
        'cmovb': 95, 'cmovbe': 96, 'cmove': 97, 'cmovg': 98, 'cmovge': 99,
        'cmovl': 100, 'cmovle': 101, 'cmovne': 102, 'cmovno': 103,
        'cmovnp': 104, 'cmovns': 105, 'cmovo': 106, 'cmovp': 107, 'cmovs': 108,
        'cmp': 109, 'cmpeqps': 110, 'cmpeqsd': 111, 'cmpless': 112,
        'cmpltpd': 113, 'cmpltps': 114, 'cmpltsd': 115, 'cmpltss': 116,
        'cmpneqps': 117, 'cmpnlepd': 118, 'cmpps': 119, 'cmpsb': 120,
        'cmpsd': 121, 'cmpsw': 122, 'cmpxchg': 123, 'cmpxchg8b': 124,
        'comisd': 125, 'comiss': 126, 'cpuid': 127, 'cqo': 128, 'csel': 129,
        'csinc': 130, 'csneg': 131, 'cvtdq2pd': 132, 'cvtdq2ps': 133,
        'cvtpd2dq': 134, 'cvtpd2ps': 135, 'cvtpi2ps': 136, 'cvtps2pd': 137,
        'cvtps2pi': 138, 'cvtsd2si': 139, 'cvtsd2ss': 140, 'cvtsi2sd': 141,
        'cvtsi2ss': 142, 'cvtss2sd': 143, 'cvtss2si': 144, 'cvttps2pi': 145,
        'cvttsd2si': 146, 'cvttss2si': 147, 'cwd': 148, 'cwde': 149,
        'daa': 150, 'daddiu': 151, 'daddu': 152, 'das': 153, 'dc': 154,
        'ddivu': 155, 'dec': 156, 'div': 157, 'divps': 158, 'divsd': 159,
        'divss': 160, 'divu': 161, 'dmult': 162, 'dsll': 163, 'dsll32': 164,
        'dsllv': 165, 'dsra': 166, 'dsra32': 167, 'dsrl': 168, 'dsrl32': 169,
        'dsrlv': 170, 'dsubu': 171, 'dup': 172, 'emms': 173, 'endbr64': 174,
        'enter': 175, 'eon': 176, 'eor': 177, 'esc': 178, 'ext': 179,
        'extr': 180, 'f2xm1': 181, 'fabs': 182, 'fadd': 183, 'faddp': 184,
        'fccmp': 185, 'fchs': 186, 'fcmge': 187, 'fcmovb': 188, 'fcmovbe': 189,
        'fcmove': 190, 'fcmovnb': 191, 'fcmovnbe': 192, 'fcmovne': 193,
        'fcmovnu': 194, 'fcmovu': 195, 'fcom': 196, 'fcomi': 197,
        'fcomip': 198, 'fcomp': 199, 'fcompp': 200, 'fcos': 201, 'fcvtme': 202,
        'fcvtmu': 203, 'fcvtzs': 204, 'fdiv': 205, 'fdivp': 206, 'fdivr': 207,
        'fdivrp': 208, 'femms': 209, 'ffree': 210, 'ffreep': 211, 'fiadd': 212,
        'ficom': 213, 'ficomp': 214, 'fidiv': 215, 'fidivr': 216, 'fild': 217,
        'fimul': 218, 'fincstp': 219, 'fist': 220, 'fistp': 221, 'fisttp': 222,
        'fisub': 223, 'fisubr': 224, 'fld': 225, 'fld1': 226, 'fldcw': 227,
        'fldenv': 228, 'fldl2e': 229, 'fldl2t': 230, 'fldlg2': 231,
        'fldln2': 232, 'fldpi': 233, 'fldz': 234, 'fmadd': 235, 'fmov': 236,
        'fmsub': 237, 'fmul': 238, 'fmulp': 239, 'fmulx': 240, 'fnclex': 241,
        'fninit': 242, 'fnmadd': 243, 'fnmsub': 244, 'fnsave': 245,
        'fnstcw': 246, 'fnstenv': 247, 'fnstsw': 248, 'fpatan': 249,
        'fprem': 250, 'fprem1': 251, 'fptan': 252, 'frndint': 253, 'frstor': 254,
        'fscale': 255, 'fsin': 256, 'fsincos': 257, 'fsqrt': 258, 'fst': 259,
        'fstp': 260, 'fsub': 261, 'fsubp': 262, 'fsubr': 263, 'fsubrp': 264,
        'ftst': 265, 'fucom': 266, 'fucomi': 267, 'fucomip': 268, 'fucomp': 269,
        'fucompp': 270, 'fxam': 271, 'fxch': 272, 'fxrstor': 273, 'fxsave': 274,
        'fxsave64': 275, 'fxtract': 276, 'fyl2x': 277, 'fyl2xp1': 278, 'hlt': 279,
        'ibts': 280, 'ic': 281, 'idiv': 282, 'imul': 283, 'in': 284, 'inc': 285,
        'ins': 286, 'insb': 287, 'insd': 288, 'int': 289, 'int1': 290, 'int3': 291,
        'into': 292, 'invd': 293, 'invlpg': 294, 'iret': 295, 'iretd': 296, 'ja': 297,
        'jae': 298, 'jalr': 299, 'jb': 300, 'jbe': 301, 'jc': 302, 'jcxz': 303,
        'je': 304, 'jecxz': 305, 'jg': 306, 'jge': 307, 'jl': 308, 'jle': 309,
        'jmp': 310, 'jna': 311, 'jnae': 312, 'jnb': 313, 'jnbe': 314, 'jnc': 315,
        'jne': 316, 'jng': 317, 'jnge': 318, 'jnl': 319, 'jnle': 320, 'jno': 321,
        'jnp': 322, 'jns': 323, 'jnz': 324, 'jo': 325, 'jp': 326, 'jpe': 327,
        'jpo': 328, 'jr': 329, 'jrcxz': 330, 'js': 331, 'jz': 332, 'lahf': 333,
        'lar': 334, 'lb': 335, 'lbu': 336, 'ld': 337, 'ld1': 338, 'ldaxr': 339,
        'ldl': 340, 'ldmxcsr': 341, 'ldnp': 342, 'ldp': 343, 'ldpsw': 344, 'ldr': 345,
        'ldrb': 346, 'ldrh': 347, 'ldrsb': 348, 'ldrsw': 349, 'lds': 350, 'ldur': 351,
        'lea': 352, 'leave': 353, 'les': 354, 'lfs': 355, 'lgdt': 356, 'lgs': 357,
        'lhu': 358, 'lidt': 359, 'ljmp': 360, 'lldt': 361, 'lmsw': 362, 'loadall': 363,
        'lock': 364, 'lodsb': 365, 'lodsd': 366, 'lodsq': 367, 'lodsw': 368,
        'loop': 369, 'loopd': 370, 'loope': 371, 'loopne': 372, 'loopnz': 373,
        'loopz': 374, 'lsl': 375, 'lsr': 376, 'lss': 377, 'ltr': 378, 'lui': 379,
        'lw': 380, 'lwu': 381, 'madd': 382, 'maskmovq': 383, 'maxps': 384, 'maxsd': 385,
        'mfence': 386, 'mfhi': 387, 'mflo': 388, 'minps': 389, 'minsd': 390, 'mov': 391,
        'movabs': 392, 'movapd': 393, 'movaps': 394, 'movbe': 395, 'movd': 396,
        'movdqa': 397, 'movdqu': 398, 'move': 399, 'movhlps': 400, 'movhpd': 401,
        'movhps': 402, 'movi': 403, 'movk': 404, 'movlhps': 405, 'movlpd': 406,
        'movlps': 407, 'movmskps': 408, 'movn': 409, 'movntdq': 410, 'movnti': 411,
        'movntps': 412, 'movntq': 413, 'movq': 414, 'movsb': 415, 'movsd': 416,
        'movsq': 417, 'movss': 418, 'movsw': 419, 'movsx': 420, 'movsxd': 421,
        'movupd': 422, 'movups': 423, 'movz': 424, 'movzx': 425, 'mrs': 426, 'msr': 427,
        'msub': 428, 'mul': 429, 'mulpd': 430, 'mulps': 431, 'mulsd': 432, 'mulss': 433,
        'mult': 434, 'multu': 435, 'mvn': 436, 'mvni': 437, 'neg': 438, 'negu': 439,
        'nop': 440, 'nor': 441, 'not': 442, 'or': 443, 'ori': 444, 'orn': 445,
        'orpd': 446, 'orps': 447, 'orr': 448, 'out': 449, 'outsd': 450, 'packssdw': 451,
        'packsswb': 452, 'packuswb': 453, 'padd': 454, 'paddb': 455, 'paddd': 456,
        'paddq': 457, 'paddsb': 458, 'paddsw': 459, 'paddusb': 460, 'paddusw': 461,
        'paddw': 462, 'palignr': 463, 'pand': 464, 'pandn': 465, 'pause': 466,
        'pavgb': 467, 'pavgw': 468, 'pclmulqdq': 469, 'pcmpeqb': 470, 'pcmpeqd': 471,
        'pcmpeqw': 472, 'pcmpgtb': 473, 'pcmpgtd': 474, 'pcmpgtw': 475, 'pcmpistri': 476,
        'pextrd': 477, 'pextrw': 478, 'pinsrb': 479, 'pinsrd': 480, 'pinsrw': 481,
        'pmaddubsw': 482, 'pmaddwd': 483, 'pmaxsw': 484, 'pmaxub': 485, 'pminsw': 486,
        'pminub': 487, 'pmovmskb': 488, 'pmulhrsw': 489, 'pmulhuw': 490, 'pmulhw': 491,
        'pmullw': 492, 'pmuludq': 493, 'pop': 494, 'popal': 495, 'popf': 496,
        'popfd': 497, 'popfq': 498, 'por': 499, 'prefetch0': 500, 'prefetchnta': 501,
        'prefetcht0': 502, 'prefetcht1': 503, 'prefetcht2': 504, 'prefetchw': 505,
        'prfm': 506, 'psadbw': 507, 'pshufb': 508, 'pshufd': 509, 'pshufhw': 510,
        'pshuflw': 511, 'pshufw': 512, 'pslld': 513, 'pslldq': 514, 'psllq': 515,
        'psllw': 516, 'psrad': 517, 'psraw': 518, 'psrld': 519, 'psrldq': 520,
        'psrlq': 521, 'psrlw': 522, 'psubb': 523, 'psubd': 524, 'psubq': 525,
        'psubsb': 526, 'psubsw': 527, 'psubusb': 528, 'psubusw': 529, 'psubw': 530,
        'punckhwd': 531, 'punpckhbw': 532, 'punpckhdq': 533, 'punpckhwd': 534,
        'punpcklbw': 535, 'punpckldq': 536, 'punpcklqdq': 537, 'punpcklwd': 538,
        'push': 539, 'pushal': 540, 'pushaw': 541, 'pushf': 542, 'pushfd': 543,
        'pushfq': 544, 'pxor': 545, 'rbit': 546, 'rcl': 547, 'rcpps': 548, 'rcr': 549,
        'rdtsc': 550, 'rep': 551, 'repe': 552, 'repne': 553, 'repnz': 554, 'repz': 555,
        'ret': 556, 'retf': 557, 'retn': 558, 'rol': 559, 'ror': 560, 'rsqrtps': 561,
        'rsubhn2': 562, 'sahf': 563, 'sal': 564, 'salc': 565, 'sar': 566, 'sb': 567,
        'sbb': 568, 'sbfiz': 569, 'sbfx': 570, 'scasb': 571, 'scasd': 572, 'scasq': 573,
        'scasw': 574, 'scvtf': 575, 'sd': 576, 'sdiv': 577, 'sdl': 578, 'sdr': 579,
        'seta': 580, 'setae': 581, 'setb': 582, 'setbe': 583, 'setc': 584, 'sete': 585,
        'setg': 586, 'setge': 587, 'setl': 588, 'setle': 589, 'setna': 590,
        'setnae': 591, 'setnb': 592, 'setnbe': 593, 'setnc': 594, 'setne': 595,
        'setng': 596, 'setnge': 597, 'setno': 598, 'setnp': 599, 'setns': 600,
        'seto': 601, 'setp': 602, 'sets': 603, 'sfence': 604, 'sgdt': 605, 'sh': 606,
        'shl': 607, 'shld': 608, 'shr': 609, 'shrd': 610, 'shufpd': 611, 'shufps': 612,
        'sidt': 613, 'sldt': 614, 'sli': 615, 'sll': 616, 'sllv': 617, 'slt': 618,
        'slti': 619, 'sltiu': 620, 'sltu': 621, 'smsubl': 622, 'smsw': 623,
        'sqdmlsl': 624, 'sqdmulh': 625, 'sqrdmulh': 626, 'sqrtps': 627, 'sqrtsd': 628,
        'sqshl': 629, 'sqshlu': 630, 'sra': 631, 'srhadd': 632, 'srl': 633, 'srlv': 634,
        'srshr': 635, 'srsra': 636, 'st1': 637, 'st2': 638, 'st3': 639, 'st4': 640,
        'stc': 641, 'std': 642, 'sti': 643, 'stmxcsr': 644, 'stnp': 645, 'stosb': 646,
        'stosd': 647, 'stosq': 648, 'stosw': 649, 'stp': 650, 'str': 651, 'strb': 652,
        'strh': 653, 'stur': 654, 'sturb': 655, 'sturh': 656, 'sub': 657, 'subpd': 658,
        'subps': 659, 'subs': 660, 'subsd': 661, 'subss': 662, 'subu': 663, 'svc': 664,
        'sw': 665, 'sxtw': 666, 'syscall': 667, 'sysenter': 668, 'tbnz': 669, 'tbz': 670,
        'teq': 671, 'test': 672, 'tst': 673, 'uabd': 674, 'uabdl': 675, 'ubfiz': 676,
        'ubfx': 677, 'ucomisd': 678, 'ucomiss': 679, 'ud2': 680, 'uminv': 681,
        'umlal': 682, 'unpckhpd': 683, 'unpckhps': 684, 'unpcklpd': 685, 'unpcklps': 686,
        'uqrshl': 687, 'uqshl': 688, 'urshl': 689, 'ushr': 690, 'uxtb': 691,
        'vaddss': 692, 'vaddsubpd': 693, 'vaesenc': 694, 'vaesenclast': 695,
        'vandnps': 696, 'vcmpeqpd': 697, 'vcvtsd2ss': 698, 'vcvtsi2sd': 699,
        'vcvtss2sd': 700, 'vdivss': 701, 'verr': 702, 'verw': 703, 'vhaddpd': 704,
        'vhaddps': 705, 'vhsubps': 706, 'vmaxss': 707, 'vminss': 708, 'vmovdqa': 709,
        'vmovdqu': 710, 'vmovhpd': 711, 'vmovupd': 712, 'vmovups': 713, 'vmulsd': 714,
        'vpacksswb': 715, 'vpackuswb': 716, 'vpaddd': 717, 'vpaddq': 718,
        'vpaddusb': 719, 'vpaddw': 720, 'vpalignr': 721, 'vpand': 722, 'vpandn': 723,
        'vpavgb': 724, 'vpcmpeqd': 725, 'vpcmpeqq': 726, 'vphaddw': 727,
        'vpinsrw': 728, 'vpmaddwd': 729, 'vpminsw': 730, 'vpminub': 731,
        'vpminuw': 732, 'vpmulhuw': 733, 'vpmullw': 734, 'vpor': 735,
        'vpshufb': 736, 'vpslld': 737, 'vpslldq': 738, 'vpsrld': 739,
        'vpsrldq': 740, 'vpsrlq': 741, 'vpsubb': 742, 'vpsubd': 743, 'vpsubsb': 744,
        'vpsubusb': 745, 'vpunpckhbw': 746, 'vpunpcklbw': 747, 'vpxor': 748,
        'vshufpd': 749, 'vsubps': 750, 'vsubsd': 751, 'vsubss': 752,
        'vunpckhpd': 753, 'vunpckhps': 754, 'vxorpd': 755, 'vxorps': 756,
        'vzeroall': 757, 'wait': 758, 'wbinvd': 759, 'xacquire': 760, 'xadd': 761,
        'xbegin': 762, 'xbts': 763, 'xchg': 764, 'xgetbv': 765, 'xlat': 766,
        'xlatb': 767, 'xor': 768, 'xori': 769, 'xorpd': 770, 'xorps': 771,
        'xrelease': 772, 'xtn': 773, 'xtn2': 774}



# Used to keep track of how many binaries have been processed
processed = 0
failed_instructions = set()
total = len(os.listdir(directory))

# Obtain the control flow graphs from the binaries
print("CFG extraction has started...")
file = open(save_file_location, "w")
for binary in os.listdir(directory):
    filename = os.fsdecode(binary)
    try:
        # Get the CFG
        proj = angr.Project(directory_name + filename, load_options={'auto_load_libs': False})
        print("Current File: " + filename)
        cfg = proj.analyses.CFGFast(show_progressbar=True)
        graph = cfg.graph
    except:
        print("Failed to process file")
        processed += 1
        print(str((processed/total)*100) + "% " + "done")
        continue 

    # Convert the CFG into a sparse matrix in scipy COOrdinate format.
    sparse = nx.adjacency_matrix(graph).tocoo()
    nodes1 = sparse.row
    nodes2 = sparse.col

    # Write the graph results
    file.write("G \n")
    nodes = list(graph.nodes())

    # Write the edges
    for i in range(len(nodes1)):
        file.write(str(nodes1[i]) + " ")
    file.write("\n")
    for i in range(len(nodes2)):
        file.write(str(nodes2[i]) + " ")
    file.write("\n")
        
    # Get the word embeded node vector
    for i in range(len(nodes)):
        embeded_node_vector = {}
        if nodes[i].block != None:
            for line in str(nodes[i].block.disassembly).splitlines():
                instruction = line.split()[1]
                try:
                    index = in_set[instruction]
                    if index in embeded_node_vector.keys():
                        embeded_node_vector[index] += 1
                    else:
                        embeded_node_vector[index] = 1
                except:
                    print("\'" + instruction + "\' " +
                        "was not found as a valid instruction. You should consider adding this.")
                    failed_instructions.add(instruction)

        # Write the word embeded node vector
        for index, count in embeded_node_vector.items():
            file.write(str(index) + ":" + str(count) + " ")
        file.write("\n")
   
    # Display the current progress information
    processed += 1
    print(graph)
    print(str((processed/total)*100) + "% " + "done")

# Wrap up everything
file.close()
print("Finished!")

# For the second time, notify the user that some instructions failed
if len(failed_instructions) != 0:
    print("The following were not valid instructions. You should consider adding them.")
    print(failed_instructions)
