import angr
from angrutils import *
import networkx as nx
import numpy as np
import os
import scipy
import gc
import logging



# Logging settings
logging.getLogger('angr.analyses').setLevel('CRITICAL')
logging.getLogger('pyvex.lifting.libvex').setLevel('CRITICAL')

# The directory containing the binaries
directory_name = "../project/data/APTMalware/samples/GorgonGroup/"
directory = os.fsencode(directory_name)
# The file where you will save the data
save_file_location = "../project/data/GorgonGroup.txt"

# x86 instuction set
in_set = {'aaa': 0, 'aad': 1, 'aam': 2, 'aas': 3, 'adc': 4, 'adcs': 5,
        'add': 6, 'addiu': 7, 'addp': 8, 'addpd': 9, 'addps': 10, 'adds': 11,
        'addsd': 12, 'addss': 13, 'addu': 14, 'adr': 15, 'adrp': 16,
        'aesdec': 17, 'aesdeclast': 18, 'aesenc': 19, 'aesenclast': 20,
        'aesimc': 21, 'aeskeygenassist': 22, 'and': 23, 'andi': 24,
        'andnpd': 25, 'andnps': 26, 'andpd': 27, 'andps': 28, 'ands': 29,
        'arpl': 30, 'asr': 31, 'b': 32, 'b.al': 33, 'b.eq': 34, 'b.ge': 35,
        'b.gt': 36, 'b.hi': 37, 'b.hs': 38, 'b.le': 39, 'b.lo': 40, 'b.ls': 41,
        'b.lt': 42, 'b.mi': 43, 'b.ne': 44, 'b.nv': 45, 'b.vc': 46, 'b.vs': 47,
        'bal': 48, 'ball': 49, 'beq': 50, 'beql': 51, 'beqz': 52, 'bfi': 53,
        'bfxil': 54, 'bgez': 55, 'bgtz': 56, 'bic': 57, 'bics': 58, 'bl': 59,
        'blez': 60, 'blr': 61, 'bltz': 62, 'bnd': 63, 'bne': 64, 'bnel': 65,
        'bnez': 66, 'bound': 67, 'br': 68, 'break': 69, 'brk': 70, 'bsf': 71,
        'bsl': 72, 'bsr': 73, 'bswap': 74, 'bt': 75, 'btc': 76, 'btr': 77,
        'bts': 78, 'call': 79, 'cbnz': 80, 'cbw': 81, 'cbz': 82, 'cdq': 83,
        'cdqe': 84, 'cinc': 85, 'clc': 86, 'cld': 87, 'clflush': 88, 'cli': 89,
        'clts': 90, 'clz': 91, 'cmc': 92, 'cmn': 93, 'cmova': 94, 'cmovae': 95,
        'cmovb': 96, 'cmovbe': 97, 'cmove': 98, 'cmovg': 99, 'cmovge': 100,
        'cmovl': 101, 'cmovle': 102, 'cmovne': 103, 'cmovno': 104,
        'cmovnp': 105, 'cmovns': 106, 'cmovo': 107, 'cmovp': 108, 'cmovs': 109,
        'cmp': 110, 'cmpeqps': 111, 'cmpeqsd': 112, 'cmpless': 113,
        'cmpltpd': 114, 'cmpltps': 115, 'cmpltsd': 116, 'cmpltss': 117,
        'cmpneqps': 118, 'cmpnlepd': 119, 'cmpnleps': 120, 'cmppd': 121,
        'cmpps': 122, 'cmpsb': 123, 'cmpsd': 124, 'cmpsw': 125,
        'cmpunordps': 126, 'cmpxchg': 127, 'cmpxchg8b': 128, 'comisd': 129,
        'comiss': 130, 'cpuid': 131, 'cqo': 132, 'csel': 133, 'csinc': 134,
        'csneg': 135, 'cvtdq2pd': 136, 'cvtdq2ps': 137, 'cvtpd2dq': 138,
        'cvtpd2pi': 139, 'cvtpd2ps': 140, 'cvtpi2ps': 141, 'cvtps2dq': 142,
        'cvtps2pd': 143, 'cvtps2pi': 144, 'cvtsd2si': 145, 'cvtsd2ss': 146,
        'cvtsi2sd': 147, 'cvtsi2ss': 148, 'cvtss2sd': 149, 'cvtss2si': 150,
        'cvttpd2dq': 151, 'cvttpd2pi': 152, 'cvttps2pi': 153, 'cvttsd2si': 154,
        'cvttss2si': 155, 'cwd': 156, 'cwde': 157, 'daa': 158, 'daddiu': 159,
        'daddu': 160, 'das': 161, 'dc': 162, 'ddivu': 163, 'dec': 164,
        'div': 165, 'divpd': 166, 'divps': 167, 'divsd': 168, 'divss': 169,
        'divu': 170, 'dmult': 171, 'dsll': 172, 'dsll32': 173, 'dsllv': 174,
        'dsra': 175, 'dsra32': 176, 'dsrl': 177, 'dsrl32': 178, 'dsrlv': 179, 
        'dsubu': 180, 'dup': 181, 'emms': 182, 'endbr64': 183, 'enter': 184,
        'eon': 185, 'eor': 186, 'esc': 187, 'ext': 188, 'extr': 189,
        'f2xm1': 190, 'fabs': 191, 'fadd': 192, 'faddp': 193, 'fbstp': 194,
        'fccmp': 195, 'fchs': 196, 'fcmge': 197, 'fcmovb': 198, 'fcmovbe': 199,
        'fcmove': 200, 'fcmovnb': 201, 'fcmovnbe': 202, 'fcmovne': 203,
        'fcmovnu': 204, 'fcmovu': 205, 'fcom': 206, 'fcomi': 207,
        'fcomip': 208, 'fcomp': 209, 'fcompp': 210, 'fcos': 211, 'fcvtme': 212,
        'fcvtmu': 213, 'fcvtzs': 214, 'fdiv': 215, 'fdivp': 216, 'fdivr': 217,
        'fdivrp': 218, 'femms': 219, 'ffree': 220, 'ffreep': 221, 'fiadd': 222,
        'ficom': 223, 'ficomp': 224, 'fidiv': 225, 'fidivr': 226, 'fild': 227,
        'fimul': 228, 'fincstp': 229, 'fist': 230, 'fistp': 231, 'fisttp': 232,
        'fisub': 233, 'fisubr': 234, 'fld': 235, 'fld1': 236, 'fldcw': 237,
        'fldenv': 238, 'fldl2e': 239, 'fldl2t': 240, 'fldlg2': 241,
        'fldln2': 242, 'fldpi': 243, 'fldz': 244, 'fmadd': 245, 'fmov': 246,
        'fmsub': 247, 'fmul': 248, 'fmulp': 249, 'fmulx': 250, 'fnclex': 251,
        'fninit': 252, 'fnmadd': 253, 'fnmsub': 254, 'fnsave': 255, 'fnstcw': 256,
        'fnstenv': 257, 'fnstsw': 258, 'fpatan': 259, 'fprem': 260, 'fprem1': 261,
        'fptan': 262, 'frndint': 263, 'frstor': 264, 'fscale': 265, 'fsin': 266,
        'fsincos': 267, 'fsqrt': 268, 'fst': 269, 'fstp': 270, 'fsub': 271,
        'fsubp': 272, 'fsubr': 273, 'fsubrp': 274, 'ftst': 275, 'fucom': 276,
        'fucomi': 277, 'fucomip': 278, 'fucomp': 279, 'fucompp': 280, 'fxam': 281,
        'fxch': 282, 'fxrstor': 283, 'fxsave': 284, 'fxsave64': 285, 'fxtract': 286,
        'fyl2x': 287, 'fyl2xp1': 288, 'hlt': 289, 'hsubpd': 290, 'hsubps': 291,
        'ibts': 292, 'ic': 293, 'idiv': 294, 'imul': 295, 'in': 296, 'inc': 297,
        'ins': 298, 'insb': 299, 'insd': 300, 'int': 301, 'int1': 302, 'int3': 303,
        'into': 304, 'invd': 305, 'invlpg': 306, 'iret': 307, 'iretd': 308,
        'iretq': 309, 'ja': 310, 'jae': 311, 'jalr': 312, 'jb': 313, 'jbe': 314,
        'jc': 315, 'jcxz': 316, 'je': 317, 'jecxz': 318, 'jg': 319, 'jge': 320,
        'jl': 321, 'jle': 322, 'jmp': 323, 'jna': 324, 'jnae': 325, 'jnb': 326,
        'jnbe': 327, 'jnc': 328, 'jne': 329, 'jng': 330, 'jnge': 331, 'jnl': 332,
        'jnle': 333, 'jno': 334, 'jnp': 335, 'jns': 336, 'jnz': 337, 'jo': 338,
        'jp': 339, 'jpe': 340, 'jpo': 341, 'jr': 342, 'jrcxz': 343, 'js': 344,
        'jz': 345, 'lahf': 346, 'lar': 347, 'lb': 348, 'lbu': 349, 'lcall': 350,
        'ld': 351, 'ld1': 352, 'ldaxr': 353, 'lddqu': 354, 'ldl': 355, 'ldmxcsr': 356,
        'ldnp': 357, 'ldp': 358, 'ldpsw': 359, 'ldr': 360, 'ldrb': 361, 'ldrh': 362,
        'ldrsb': 363, 'ldrsw': 364, 'lds': 365, 'ldur': 366, 'lea': 367, 'leave': 368,
        'les': 369, 'lfs': 370, 'lgdt': 371, 'lgs': 372, 'lhu': 373, 'lidt': 374,
        'ljmp': 375, 'lldt': 376, 'lmsw': 377, 'loadall': 378, 'lock': 379,
        'lodsb': 380, 'lodsd': 381, 'lodsq': 382, 'lodsw': 383, 'loop': 384,
        'loopd': 385, 'loope': 386, 'loopne': 387, 'loopnz': 388, 'loopz': 389,
        'lsl': 390, 'lsr': 391, 'lss': 392, 'ltr': 393, 'lui': 394, 'lw': 395,
        'lwu': 396, 'lzcnt': 397, 'madd': 398, 'maskmovq': 399, 'maxps': 400,
        'maxsd': 401, 'maxss': 402, 'mfence': 403, 'mfhi': 404, 'mflo': 405,
        'minpd': 406, 'minps': 407, 'minsd': 408, 'minss': 409, 'mov': 410,
        'movabs': 411, 'movapd': 412, 'movaps': 413, 'movbe': 414, 'movd': 415,
        'movddup': 416, 'movdq2q': 417, 'movdqa': 418, 'movdqu': 419, 'move': 420,
        'movhlps': 421, 'movhpd': 422, 'movhps': 423, 'movi': 424, 'movk': 425,
        'movlhps': 426, 'movlpd': 427, 'movlps': 428, 'movmskps': 429, 'movn': 430,
        'movntdq': 431, 'movnti': 432, 'movntpd': 433, 'movntps': 434, 'movntq': 435,
        'movq': 436, 'movsb': 437, 'movsd': 438, 'movshdup': 439, 'movsldup': 440,
        'movsq': 441, 'movss': 442, 'movsw': 443, 'movsx': 444, 'movsxd': 445,
        'movupd': 446, 'movups': 447, 'movz': 448, 'movzx': 449, 'mrs': 450,
        'msr': 451, 'msub': 452, 'mul': 453, 'mulpd': 454, 'mulps': 455, 'mulsd': 456,
        'mulss': 457, 'mult': 458, 'multu': 459, 'mvn': 460, 'mvni': 461, 'neg': 462,
        'negu': 463, 'nop': 464, 'nor': 465, 'not': 466, 'or': 467, 'ori': 468,
        'orn': 469, 'orpd': 470, 'orps': 471, 'orr': 472, 'out': 473, 'outsb': 474,
        'outsd': 475, 'pabsb': 476, 'pabsd': 477, 'packssdw': 478, 'packsswb': 479,
        'packuswb': 480, 'padd': 481, 'paddb': 482, 'paddd': 483, 'paddq': 484,
        'paddsb': 485, 'paddsw': 486, 'paddusb': 487, 'paddusw': 488, 'paddw': 489,
        'palignr': 490, 'pand': 491, 'pandn': 492, 'pause': 493, 'pavgb': 494,
        'pavgw': 495, 'pclmulqdq': 496, 'pcmpeqb': 497, 'pcmpeqd': 498, 'pcmpeqw': 499,
        'pcmpgtb': 500, 'pcmpgtd': 501, 'pcmpgtw': 502, 'pcmpistri': 503,
        'pextrd': 504, 'pextrw': 505, 'phaddsw': 506, 'phaddw': 507, 'phsubd': 508,
        'phsubw': 509, 'pinsrb': 510, 'pinsrd': 511, 'pinsrw': 512, 'pmaddubsw': 513,
        'pmaddwd': 514, 'pmaxsw': 515, 'pmaxub': 516, 'pminsw': 517, 'pminub': 518,
        'pmovmskb': 519, 'pmulhrsw': 520, 'pmulhuw': 521, 'pmulhw': 522, 'pmullw': 523,
        'pmuludq': 524, 'pop': 525, 'popal': 526, 'popf': 527, 'popfd': 528,
        'popfq': 529, 'por': 530, 'prefetch0': 531, 'prefetchnta': 532,
        'prefetcht0': 533, 'prefetcht1': 534, 'prefetcht2': 535, 'prefetchw': 536,
        'prfm': 537, 'psadbw': 538, 'pshufb': 539, 'pshufd': 540, 'pshufhw': 541,
        'pshuflw': 542, 'pshufw': 543, 'psignb': 544, 'pslld': 545, 'pslldq': 546,
        'psllq': 547, 'psllw': 548, 'psrad': 549, 'psraw': 550, 'psrld': 551,
        'psrldq': 552, 'psrlq': 553, 'psrlw': 554, 'psubb': 555, 'psubd': 556,
        'psubq': 557, 'psubsb': 558, 'psubsw': 559, 'psubusb': 560, 'psubusw': 561,
        'psubw': 562, 'punckhwd': 563, 'punpckhbw': 564, 'punpckhdq': 565,
        'punpckhwd': 566, 'punpcklbw': 567, 'punpckldq': 568, 'punpcklqdq': 569,
        'punpcklwd': 570, 'push': 571, 'pushal': 572, 'pushaw': 573, 'pushf': 574,
        'pushfd': 575, 'pushfq': 576, 'pxor': 577, 'rbit': 578, 'rcl': 579,
        'rcpps': 580, 'rcr': 581, 'rdtsc': 582, 'rdtscp': 583, 'rep': 584, 'repe': 585,
        'repne': 586, 'repnz': 587, 'repz': 588, 'ret': 589, 'retf': 590, 'retn': 591,
        'rol': 592, 'ror': 593, 'rsqrtps': 594, 'rsubhn2': 595, 'sahf': 596,
        'sal': 597, 'salc': 598, 'sar': 599, 'sb': 600, 'sbb': 601, 'sbfiz': 602,
        'sbfx': 603, 'scasb': 604, 'scasd': 605, 'scasq': 606, 'scasw': 607,
        'scvtf': 608, 'sd': 609, 'sdiv': 610, 'sdl': 611, 'sdr': 612, 'seta': 613,
        'setae': 614, 'setb': 615, 'setbe': 616, 'setc': 617, 'sete': 618, 'setg': 619,
        'setge': 620, 'setl': 621, 'setle': 622, 'setna': 623, 'setnae': 624,
        'setnb': 625, 'setnbe': 626, 'setnc': 627, 'setne': 628, 'setng': 629,
        'setnge': 630, 'setno': 631, 'setnp': 632, 'setns': 633, 'seto': 634,
        'setp': 635, 'sets': 636, 'sfence': 637, 'sgdt': 638, 'sh': 639, 'shl': 640,
        'shld': 641, 'shr': 642, 'shrd': 643, 'shufpd': 644, 'shufps': 645,
        'sidt': 646, 'sldt': 647, 'sli': 648, 'sll': 649, 'sllv': 650, 'slt': 651,
        'slti': 652, 'sltiu': 653, 'sltu': 654, 'smsubl': 655, 'smsw': 656,
        'sqdmlsl': 657, 'sqdmulh': 658, 'sqrdmulh': 659, 'sqrtps': 660, 'sqrtsd': 661,
        'sqshl': 662, 'sqshlu': 663, 'sra': 664, 'srhadd': 665, 'srl': 666,
        'srlv': 667, 'srshr': 668, 'srsra': 669, 'st1': 670, 'st2': 671, 'st3': 672,
        'st4': 673, 'stc': 674, 'std': 675, 'sti': 676, 'stmxcsr': 677, 'stnp': 678,
        'stosb': 679, 'stosd': 680, 'stosq': 681, 'stosw': 682, 'stp': 683, 'str': 684,
        'strb': 685, 'strh': 686, 'stur': 687, 'sturb': 688, 'sturh': 689, 'sub': 690,
        'subpd': 691, 'subps': 692, 'subs': 693, 'subsd': 694, 'subss': 695,
        'subu': 696, 'svc': 697, 'sw': 698, 'sxtw': 699, 'syscall': 700,
        'sysenter': 701, 'tbnz': 702, 'tbz': 703, 'teq': 704, 'test': 705, 'tst': 706,
        'uabd': 707, 'uabdl': 708, 'ubfiz': 709, 'ubfx': 710, 'ucomisd': 711,
        'ucomiss': 712, 'ud2': 713, 'uminv': 714, 'umlal': 715, 'unpckhpd': 716,
        'unpckhps': 717, 'unpcklpd': 718, 'unpcklps': 719, 'uqrshl': 720, 'uqshl': 721,
        'urshl': 722, 'ushr': 723, 'uxtb': 724, 'vaddpd': 725, 'vaddps': 726,
        'vaddsd': 727, 'vaddss': 728, 'vaddsubpd': 729, 'vaddsubps': 730,
        'vaesenc': 731, 'vaesenclast': 732, 'vandnpd': 733, 'vandnps': 734,
        'vandpd': 735, 'vandps': 736, 'vblendvps': 737, 'vcmpeq_osss': 738,
        'vcmpeqpd': 739, 'vcmpneq_oqps': 740, 'vcomisd': 741, 'vcomiss': 742,
        'vcvtdq2pd': 743, 'vcvtdq2ps': 744, 'vcvtpd2ps': 745, 'vcvtsd2ss': 746,
        'vcvtsi2sd': 747, 'vcvtsi2ss': 748, 'vcvtss2sd': 749, 'vcvttpd2dqx': 750,
        'vcvttps2dq': 751, 'vcvttsd2si': 752, 'vcvttss2si': 753, 'vdivpd': 754,
        'vdivps': 755, 'vdivsd': 756, 'vdivss': 757, 'vdppd': 758, 'vdpps': 759,
        'verr': 760, 'verw': 761, 'vfmadd213ss': 762, 'vfmadd231ps': 763,
        'vfmaddss': 764, 'vfmsub132pd': 765, 'vfmsub132ps': 766, 'vfmsub132sd': 767,
        'vfmsub132ss': 768, 'vfmsub231pd': 769, 'vfmsub231ps': 770,
        'vfmsubadd132ps': 771, 'vfmsubadd231ps': 772, 'vfmsubaddpd': 773,
        'vfmsubsd': 774, 'vfnmadd213pd': 775, 'vfnmadd213ps': 776, 'vfnmaddss': 777,
        'vfnmsub132ps': 778, 'vfnmsub213sd': 779, 'vfnmsub231pd': 780,
        'vfnmsubps': 781, 'vhaddpd': 782, 'vhaddps': 783, 'vhsubpd': 784,
        'vhsubps': 785, 'vinserti128': 786, 'vlddqu': 787, 'vmaxpd': 788,
        'vmaxps': 789, 'vmaxsd': 790, 'vmaxss': 791, 'vminpd': 792, 'vminps': 793,
        'vminsd': 794, 'vminss': 795, 'vmovapd': 796, 'vmovaps': 797, 'vmovd': 798,
        'vmovdqa': 799, 'vmovdqu': 800, 'vmovhlps': 801, 'vmovhpd': 802,
        'vmovhps': 803, 'vmovlhps': 804, 'vmovlpd': 805, 'vmovlps': 806,
        'vmovntdq': 807, 'vmovq': 808, 'vmovsd': 809, 'vmovshdup': 810, 'vmovss': 811,
        'vmovupd': 812, 'vmovups': 813, 'vmulpd': 814, 'vmulps': 815, 'vmulsd': 816,
        'vmulss': 817, 'vorpd': 818, 'vorps': 819, 'vpackssdw': 820, 'vpacksswb': 821,
        'vpackuswb': 822, 'vpaddb': 823, 'vpaddd': 824, 'vpaddq': 825, 'vpaddsb': 826,
        'vpaddsw': 827, 'vpaddusb': 828, 'vpaddusw': 829, 'vpaddw': 830,
        'vpalignr': 831, 'vpand': 832, 'vpandn': 833, 'vpavgb': 834, 'vpavgw': 835,
        'vpblendd': 836, 'vpblendvb': 837, 'vpblendw': 838, 'vpcmpeqb': 839,
        'vpcmpeqd': 840, 'vpcmpeqq': 841, 'vpcmpeqw': 842, 'vpcmpgtb': 843,
        'vpcmpgtd': 844, 'vpcmpgtw': 845, 'vpermilpd': 846, 'vphaddw': 847,
        'vpinsrw': 848, 'vpmaddubsw': 849, 'vpmaddwd': 850, 'vpmaskmovd': 851,
        'vpmaxsb': 852, 'vpmaxsw': 853, 'vpmaxub': 854, 'vpmaxud': 855, 'vpminsb': 856,
        'vpminsd': 857, 'vpminsw': 858, 'vpminub': 859, 'vpminuw': 860,
        'vpmulhuw': 861, 'vpmulhw': 862, 'vpmullw': 863, 'vpmuludq': 864, 'vpor': 865,
        'vpsadbw': 866, 'vpshufb': 867, 'vpslld': 868, 'vpslldq': 869, 'vpsllq': 870,
        'vpsllw': 871, 'vpsrad': 872, 'vpsraw': 873, 'vpsrld': 874, 'vpsrldq': 875,
        'vpsrlq': 876, 'vpsrlw': 877, 'vpsubb': 878, 'vpsubd': 879, 'vpsubq': 880,
        'vpsubsb': 881, 'vpsubsw': 882, 'vpsubusb': 883, 'vpsubusw': 884,
        'vpsubw': 885, 'vpunpckhbw': 886, 'vpunpckhdq': 887, 'vpunpckhqdq': 888,
        'vpunpckhwd': 889, 'vpunpcklbw': 890, 'vpunpckldq': 891, 'vpunpcklqdq': 892,
        'vpunpcklwd': 893, 'vpxor': 894, 'vrcpps': 895, 'vrcpss': 896, 'vrsqrtps': 897,
        'vrsqrtss': 898, 'vshufpd': 899, 'vshufps': 900, 'vsqrtsd': 901,
        'vsqrtss': 902, 'vsubpd': 903, 'vsubps': 904, 'vsubsd': 905, 'vsubss': 906,
        'vunpckhpd': 907, 'vunpckhps': 908, 'vunpcklpd': 909, 'vunpcklps': 910,
        'vxorpd': 911, 'vxorps': 912, 'vzeroall': 913, 'wait': 914, 'wbinvd': 915,
        'xabort': 916, 'xacquire': 917, 'xadd': 918, 'xbegin': 919, 'xbts': 920,
        'xchg': 921, 'xgetbv': 922, 'xlat': 923, 'xlatb': 924, 'xor': 925,
        'xori': 926, 'xorpd': 927, 'xorps': 928, 'xrelease': 929, 'xrstor': 930,
        'xsave': 931, 'xtn': 932, 'xtn2': 933}



# Used to keep track of how many binaries have been processed
processed = 0
failed_instructions = set()
total = len(os.listdir(directory))

# Obtain the control flow graphs from the binaries
print("CFG extraction has started...")
file = open(save_file_location, "w")
for binary in os.listdir(directory):
    filename = os.fsdecode(binary)
    try:
        # Get the CFG
        proj = angr.Project(directory_name + filename, load_options={'auto_load_libs': False})
        print("Current File: " + filename)
        cfg = proj.analyses.CFGFast(show_progressbar=True)
        graph = cfg.graph
    except:
        print("Failed to process file")
        processed += 1
        print(str((processed/total)*100) + "% " + "done")
        continue 

    # Convert the CFG into a sparse matrix in scipy COOrdinate format.
    sparse = nx.adjacency_matrix(graph).tocoo()
    nodes1 = sparse.row
    nodes2 = sparse.col

    # Write the graph results
    file.write("G \n")
    nodes = list(graph.nodes())
    file.write(str(len(nodes)) + "\n")

    # Write the edges
    for i in range(len(nodes1)):
        file.write(str(nodes1[i]) + " ")
    file.write("\n")
    for i in range(len(nodes2)):
        file.write(str(nodes2[i]) + " ")
    file.write("\n")
        
    # Get the word embeded node vector
    for i in range(len(nodes)):
        embeded_node_vector = {}
        if nodes[i].block != None:
            for line in str(nodes[i].block.disassembly).splitlines():
                instruction = line.split()[1]
                try:
                    index = in_set[instruction]
                    if index in embeded_node_vector.keys():
                        embeded_node_vector[index] += 1
                    else:
                        embeded_node_vector[index] = 1
                except:
                    print("\'" + instruction + "\' " +
                        "was not found as a valid instruction. You should consider adding this.")
                    failed_instructions.add(instruction)

        # Write the word embeded node vector
        for index, count in embeded_node_vector.items():
            file.write(str(index) + ":" + str(count) + " ")
        file.write("\n")
   
    # Display the current progress information
    processed += 1
    print(graph)
    print(str((processed/total)*100) + "% " + "done")

# Wrap up everything
file.close()
print("Finished!")

# For the second time, notify the user that some instructions failed
if len(failed_instructions) != 0:
    print("The following were not valid instructions. You should consider adding them.")
    print(failed_instructions)
