import angr
from angrutils import *
import networkx as nx
import numpy as np
import os
import sys
import scipy
import gc


# What family the group of binaries is apart of 
file_family = 0
# The directory containing the binaries
directory_name = "../project/data/APTMalware/samples/APT29/"
directory = os.fsencode(directory_name)
# The file where you will save the data
save_file_location = "../project/data/test_group1.txt"

# x86 instuction set
in_set = {'ffreep': 304, 'syscall': 305, 'jrcxz': 306, 'int3': 307,
        'fcomp': 308, 'fisttp': 309, 'fist': 310, 'loope': 311,
        'popfq': 312, 'vmaxss': 313, 'fidiv': 314, 'bnd': 315, 'fimul': 316,
        'fst': 317, 'fsubp': 318, 'pushfq': 319, 'fcmovne': 320, 'paddusw': 321,
        'fcom': 322, 'fyl2xp1': 323, 'movnti': 324, 'ffreep': 325, 'fprem': 326,
        'cbz': 327, 'bl': 328, 'ldr': 329, 'sbfx': 330, 'b': 331, 'b.hi': 332,
        'cbnz': 333, 'tbnz': 334, 'sturh': 335, 'sturb': 336, 'b.nv': 337, 'adr': 338,
        'ubfx': 339, 'smsubl': 340, 'adrp': 341, 'sqshl': 342, 'ubfiz': 343,
        'sqdmlsl': 344, 'ld1': 345, 'stp': 346, 'b.ne': 347, 'st4': 348,
        'msr': 349, 'eor': 350, 'movz': 351, 'ands': 352, 'orr': 353, 'uabdl': 354,
        'fdivr': 355, 'fsubr': 356, 'mrs': 347, 'movn': 348, 'movk': 349, 'stur': 350,
        'ldp': 351, 'blr': 352, 'b.lt': 353, 'sxtw': 354, 'msub': 355, 'csel': 356,
        'csinc': 357, 'br': 358, 'subs': 359, 'b.eq': 360, 'fisub': 361, 'fcomi': 362,
        'fcomip': 363, 'pause': 364, 'fnstenv': 365, 'fcmovne': 366, 'pslld': 367,
        'psubd': 368, 'pmuludq': 369, 'psrld': 370, 'comisd': 371, 'fnstsw': 372,
        'fmov': 373, 'uxtb': 374, 'b.le': 375, 'strb': 376, 'b.gt': 377, 'ldrb': 378,
        'xtn2': 379, 'xtn': 380, 'dup': 381, 'movi': 382, 'fcmovu': 383, 'stosq': 384,
        'paddsb': 385, 'rsqrtps': 386, 'fsin': 387, 'fnsave': 388, 'vaddsubpd': 389,
        'xacquire': 390, 'scasq': 391, 'cpuid': 392, 'unpcklps': 393, 'pshufhw': 394,
        'tbz': 395, 'b.vc': 396, 'fnmadd': 397, 'sli': 398, 'fcvtme': 399, 'dc': 400,
        'b.lo': 401, 'ic': 402, 'b.lo': 403, 'adds': 404, 'cinc': 405, 'adcs': 406,
        'st1': 407, 'orn': 408, 'ldpsw': 409, 'stnp': 410, 'extr': 411, 'prfm': 412,
        'csneg': 413, 'pavgw': 414, 'vcvtss2sd': 415, 'pmullw': 416, 'xrelease': 417,
        'cmn': 418, 'tst': 419, 'fxam': 420, 'fxsave64': 421, 'frstor': 422,
        'cvtdq2ps': 423, 'fisubr': 424, 'vmovupd': 425, 'ffree': 426, 'xbegin': 427,
        'emms': 428, 'enter': 429, 'fucom': 430, 'fabs': 431, 'vpcmpeqd': 432,
        'ins': 433, 'strh': 434, 'bfi': 435, 'b.vs': 436, 'mvn': 437, 'eon': 438,
        'umlal': 439, 'fldln2': 440, 'seto': 441, 'ldur': 442, 'sdiv': 443,
        'ldrsw': 444, 'asr': 445, 'b.ls': 446,
        'lsr': 447, 'fcmovbe': 448, 'fidivr': 449, 'vminss': 450, 'fcmovb': 451,
        'vpsubusb': 452, 'vsubsd': 453, 'paddusb': 454, 'lodsq': 455, 'movsq': 456,
        'fucomp': 457, 'cvtps2pi': 458, 'cvtpi2ps': 459, 'fcos': 460, 'cmovo': 461,
        'subps': 462, 'endbr64': 463, 'svc': 464, 'madd': 465, 'fmadd': 466,
        'urshl': 467, 'uqshl': 468, 'fcvtmu': 469, 'bic': 470, 'ld': 471, 'jr': 472,
        'sd': 473, 'daddiu': 474, 'beq': 475, 'lui': 476, 'addiu': 477, 'move': 478,
        'ori': 479, 'daddu': 480, 'bnez': 481, 'lhu': 482, 'sll': 483, 'slti': 484,
        'fcmovnu': 485, 'vmovhpd': 486, 'divps': 487, 'fldenv': 488, 'fldpi': 489,
        'vpackuswb': 490, 'vpsubsb': 491, 'vunpckhpd': 492, 'pavgb': 493,
        'pshufw': 494, 'comiss': 495, 'femms': 496, 'b.hs': 497, 'b.al': 498,
        'ushr': 499, 'rsubhn2': 500, 'clz': 501, 'rbit': 502, 'maxps': 503,
        'packssdw': 504, 'fsqrt': 505, 'jecxz': 506, 'unpckhps': 507, 'sh': 508,
        'andi': 509, 'jalr': 510, 'bne': 511, 'nor': 512, 'lbu': 513, 'beqz': 514,
        'addu': 515, 'lw': 516,
        'vpunpckhbw': 517, 'pmaddwd': 518, 'vpinsrw': 519, 'vsubps': 520, 'minps': 521,
        'psadbw': 522, 'pmaxub': 523, 'vpandn': 524, 'cvtps2pd': 525,
        'vcvtsi2sd': 526, 'fldl2e': 527, 'fsincos': 528, 'fcmovnb': 529, 'vshufpd': 530,
        'ldrh': 531, 'movlps': 532, 'addps': 533, 'packsswb': 534, 'srhadd': 535,
        'ldnp': 536, 'uminv': 537, 'bsl': 538, 'st2': 539, 'bics': 540, 'b.mi': 541,
        'fptan': 542, 'vsubps': 543, 'psllw': 544, 'fxtract': 545, 'psllw': 546,
        'setnp': 547, 'vpavgb': 548, 'pmaxsw': 549, 'vpmaddwd': 550, 'pminub': 551,
        'cvttps2pi': 552, 'cmovnp': 553, 'vpminsw': 554, 'psubsb': 555,
        'vcvtsd2ss': 556, 'frndint': 557, 'rdtsc': 558, 'psraw': 559, 'vandnps': 560,
        'fmulx': 561, 'ldrsb': 562, 'srshr': 563, 'bfxil': 564, 'st3': 565, 'brk': 566,
        'ext': 567, 'fldlg2': 568, 'addp': 569, 'uabd': 570, 'movntq': 571,
        'vpaddw': 572, 'prefetch0': 573, 'psubsw': 574, 'psubw': 575, 'pminsw': 576,
        'psubusb': 577, 'vpaddusb': 578, 'pcmpeqw': 579, 'vpand': 580, 'vpsrld': 581,
        'setno': 582, 'pmulhw': 583, 'fscale': 584, 'sbfiz': 585, 'ldaxr': 586,
        'mvni': 587, 'b.ge': 588, 'ball': 589, 'sb': 590, 'lb': 591, 'beql': 592,
        'bgez': 593, 'srl': 594, 'dsll': 595, 'dsll32': 596, 'dsra32': 597,
        'slt': 598, 'sw': 599, 'bltz': 600,
        'fmsub': 601, 'fnmsub': 602, 'fccmp': 603, 'scvtf': 604, 'sqdmulh': 605,
        'fcvtzs': 606, 'sqrdmulh': 607, 'sqshlu': 608, 'paddsw': 609,
        'vpmulhuw': 610, 'vpacksswb': 611, 'fucompp': 612, 'psubusw': 613,
        'cmovno': 614, 'cmovp': 615, 'vunpckhps': 616, 'vhsubps': 617,
        'uqrshl': 618, 'fcmge': 619, 'srsra': 620, 'cmpeqps': 621,
        'psubq': 622, 'fldl2t': 623, 'rcpps': 624, 'insb': 625, 'bgtz': 626,
        'blez': 627, 'sltu': 628, 'xori': 629, 'dsrl32': 630, 'sltiu': 631,
        'dmult': 632, 'mflo': 633, 'sra': 634,
        'vhaddpd': 635, 'vpsubd': 636, 'fpatan': 637, 'paddb': 638, 'fcompp': 639,
        'vpsubb': 640, 'vphaddw': 641, 'vpunpcklbw': 642, 'vpsrlq': 643,
        'prefetcht0': 644, 'dsubu': 645, 'lwu': 646, 'dsra': 647, 'mfhi': 648,
        'teq': 649, 'break': 650, 'ddivu': 651, 'sllv': 652, 'negu': 653,
        'divu': 654, 'bnel': 655,
        'pmulhuw': 656, 'subu': 657, 'mult': 658, 'dsrl': 659, 'dsllv': 660,
        'dsrlv': 661, 'srlv': 662, 'multu': 663, 'ldl': 664, 'sdl': 665, 'bal': 666,
        'vsubss': 667, 'sdr': 668,
        'unpckhpd': 669, 'fyl2x': 670, 'sqrtps': 671, 'movlhps': 672, 'unpcklpd': 673, 'fprem1': 674, 'cvtsd2si': 675,
        'prefetcht2': 676, 'shufps': 677, 'ftst': 678, 'sysenter': 679, 'pmovmskb': 680, 'mulps': 681, 'fninit': 682,
        'cmpnlepd': 683, 'cmpps': 684, 'movlpd': 685, 'sqrtsd': 686, 'palignr': 687, 'cvtpd2ps': 688, 'maskmovq': 689,
        'prefetcht1': 707, 'mulpd': 708, 'cvtdq2pd': 709, 'paddw': 710, 'movntps': 711, 'psubb': 712, 'cmpeqsd': 713,
        'cmpltpd': 690, 'fxsave': 691, 'f2xm1': 692,
        'fnclex': 693, 'prefetchnta': 694, 'popal': 695, 'ljmp': 696, 'ldmxcsr': 697,
        'stmxcsr': 698, 'xlatb': 699, 'pushal': 700, 'iretd': 701, 'salc': 702,
        'ficom': 703, 'ficomp': 704, 'prefetchw': 705, 'fincstp': 706,
        'sfence': 714, 'vpmullw': 715, 'vpxor': 716, 'vmulsd': 718, 'vpminuw': 719, 'vpcmpeqq': 720, 'vdivss': 721,
        'movmskps': 722, 'vxorpd': 723, 'fxrstor': 724, 'vaddss': 725, 'vpminub': 726,
        'xgetbv': 727, 'movntdq': 728, 'vhaddps': 729, 'vcmpeqpd': 730,
        'aeskeygenassist': 731, 'pcmpistri': 732, 'aesenc': 733, 'movhlps': 734, 'aesenclast': 735,
        'aesdec': 736, 'vmovups': 737, 'pinsrd': 738, 'cvtpd2dq': 739, 'aesdeclast': 740, 'pextrd': 741,
        'vpslldq': 742, 'vmovdqa': 743, 'vpalignr': 744, 'vaesenclast': 745, 'pclmulqdq': 746, 'vpaddq': 747,
        'aesimc': 748, 'vzeroall': 749, 'vaesenc': 750, 'vpor': 751, 'vxorps': 752, 'vpshufb': 753, 'vpsrldq': 754,
        'vmovdqu': 755, 'vpaddd': 756, 'vpslld': 757, 'pshufb': 758, 'pinsrb': 559,
        'aaa': 0, 'aad': 1, 'aam': 2, 'aas': 3, 'adc': 4, 'add': 5,
        'addpd': 6, 'addsd': 7, 'addss': 8, 'and': 9, 'andnpd': 10,
        'andnps': 11, 'andpd': 12, 'andps': 13, 'arpl': 14, 'bsf': 15,
        'bsr': 16, 'bswap': 17, 'bt': 18, 'btc': 19, 'btr': 20, 'bts': 21,
        'call': 22, 'cbw': 23, 'cdq': 24, 'cdqe': 25, 'clc': 26, 'cld': 27,
        'cli': 28, 'clts': 29, 'cmc': 30, 'cmova': 31, 'cmovae': 32,
        'cmovb': 33, 'cmovbe': 34, 'cmove': 35, 'cmovg': 36, 'cmovge': 38,
        'cmovl': 39, 'cmovle': 40, 'cmovne': 41, 'cmovns': 42, 'cmovs': 43,
        'cmp': 44, 'cmpltsd': 45, 'cmpltss': 46, 'cmpsb': 47, 'cmpsd': 48,
        'cmpsw': 49, 'cmpxchg': 50, 'cqo': 51, 'cvtsd2ss': 52, 'cvtsi2sd': 53,
        'cvtsi2ss': 54, 'cvtss2sd': 55, 'cvttsd2si': 56, 'cvttss2si': 57,
        'cwd': 58, 'cwde': 59, 'daa': 60, 'das': 61, 'dec': 62, 'div': 63,
        'divsd': 64, 'divss': 65, 'esc': 66, 'fadd': 67, 'faddp': 68,
        'fchs': 69, 'fcmove': 70, 'fcmovnbe': 71, 'fdiv': 72, 'fdivp': 73,
        'fdivrp': 74, 'fiadd': 75, 'fild': 76, 'fistp': 77, 'fld': 78,
        'fld1': 79, 'fldcw': 80, 'fldz': 81, 'fmul': 82, 'fmulp': 83,
        'fnstcw': 84, 'fstp': 85, 'fsub': 86, 'fsubrp': 87, 'fucomi': 88,
        'fucomip': 89, 'fxch': 90, 'hlt': 91, 'ibts': 92, 'idiv': 93,
        'imul': 94, 'in': 95, 'inc': 96, 'insd': 97, 'int': 98, 'into': 99,
        'invd': 100, 'invlpg': 101, 'iret': 102, 'ja': 103, 'jae': 104,
        'jb': 105, 'jbe': 106, 'jc': 107, 'jcxz': 108, 'je': 109, 'jg': 110,
        'jge': 111, 'jl': 112, 'jle': 113, 'jmp': 114, 'jna': 115, 'jnae': 116,
        'jnb': 117, 'jnbe': 118, 'jnc': 119, 'jne': 120, 'jng': 121,
        'jnge': 122, 'jnl': 123, 'jnle': 124, 'jno': 125, 'jnp': 126,
        'jns': 127, 'jnz': 128, 'jo': 129, 'jp': 130, 'jpe': 131, 'jpo': 132,
        'js': 133, 'jz': 134, 'lahf': 135, 'lar': 136, 'lds': 137, 'lea': 138,
        'leave': 139, 'les': 140, 'lfs': 141, 'lgdt': 142, 'lgs': 143,
        'lidt': 144, 'lldt': 145, 'lmsw': 146, 'loadall': 147, 'lock': 148,
        'lodsb': 149, 'lodsd': 150, 'lodsw': 151, 'loop': 152, 'loopd': 153,
        'loopne': 154, 'loopnz': 155, 'loopz': 156, 'lsl': 157, 'lss': 158, 'ltr': 159, 'maxsd': 160, 'mfence': 161, 'minsd': 162, 'mov': 163, 'movabs': 164, 'movapd': 165, 'movaps': 166, 'movd': 167, 'movdqa': 168, 'movdqu': 169, 'movhps': 170, 'movq': 171, 'movsb': 172, 'movsd': 173, 'movss': 174, 'movsw': 175, 'movsx': 176, 'movsxd': 177, 'movupd': 178, 'movups': 179, 'movzx': 180, 'mul': 181, 'mulsd': 182, 'mulss': 183, 'neg': 184, 'nop': 185, 'not': 186, 'or': 187, 'orpd': 188, 'orps': 189, 'out': 190, 'outsd': 191, 'packuswb': 192, 'padd': 193, 'paddd': 194, 'paddq': 195, 'pand': 196, 'pandn': 197, 'pcmpeqb': 198, 'pcmpeqd': 199, 'pcmpgtb': 200, 'pcmpgtd': 201, 'pcmpgtw': 202, 'pextrw': 203, 'pinsrw': 204, 'pop': 205, 'popf': 206, 'popfd': 207, 'por': 208, 'pshufd': 209, 'pshuflw': 210, 'pslldq': 211, 'psllq': 212, 'psrad': 213, 'psrldq': 214, 'psrlq': 215, 'psrlw': 216, 'punckhwd': 217, 'punpckhbw': 218, 'punpckhdq': 219, 'punpckhwd': 220, 'punpcklbw': 221, 'punpckldq': 222, 'punpcklqdq': 223, 'punpcklwd': 224, 'push': 225, 'pushf': 226, 'pushfd': 227, 'pxor': 228, 'rcl': 229, 'rcr': 230, 'rep': 231, 'repe': 232, 'repne': 233, 'repnz': 234, 'repz': 235, 'ret': 236, 'retf': 237, 'retn': 238, 'rol': 239, 'ror': 240, 'sahf': 241, 'sal': 242, 'sar': 243, 'sbb': 244, 'scasb': 245, 'scasd': 246, 'scasw': 247, 'seta': 248, 'setae': 249, 'setb': 250, 'setbe': 251, 'setc': 252, 'sete': 253, 'setg': 254, 'setge': 255, 'setl': 256, 'setle': 257, 'setna': 258, 'setnae': 259, 'setnb': 260, 'setnbe': 261, 'setnc': 262, 'setne': 263, 'setng': 264, 'setnge': 265, 'setns': 266, 'setp': 267, 'sets': 268, 'sgdt': 269, 'shl': 270, 'shld': 271, 'shr': 272, 'shrd': 273, 'shufpd': 274, 'sidt': 275, 'sldt': 276, 'smsw': 277, 'stc': 278, 'std': 279, 'sti': 280, 'stosb': 281, 'stosd': 282, 'stosw': 283, 'str': 284, 'sub': 285, 'subpd': 286, 'subsd': 287, 'subss': 288, 'test': 289, 'ucomisd': 290, 'ucomiss': 291, 'ud2': 292, 'verr': 293, 'verw': 294, 'wait': 295, 'wbinvd': 296, 'xadd': 297, 'xbts': 298, 'xchg': 299, 'xlat': 300, 'xor': 301, 'xorpd': 302, 'xorps': 303}





# Used to keep track of how many binaries have been processed
processed = 0
failed_instructions = set()
total = len(os.listdir(directory))

# Obtain the control flow graphs from the binaries
print("CFG extraction has started...")
file = open(save_file_location, "w")
for binary in os.listdir(directory):
    filename = os.fsdecode(binary)
    try:
        # Get the CFG
        proj = angr.Project(directory_name + filename, load_options={'auto_load_libs': False})
        print("Current File: " + filename)
        cfg = proj.analyses.CFGFast()
        graph = cfg.graph

        # Convert the CFG into a sparse matrix in scipy COOrdinate format.
        sparse = nx.adjacency_matrix(graph).tocoo()
        nodes1 = sparse.row
        nodes2 = sparse.col

        # Print the graph results
        file.write("G \n")
        nodes = list(graph.nodes())

        # Print the edges
        for i in range(len(nodes1)):
            file.write(str(nodes1[i]) + " ")
        file.write("\n")
        for i in range(len(nodes2)):
            file.write(str(nodes2[i]) + " ")
        file.write("\n")

        for i in range(len(nodes)):
            # Create the embeded node vector
            embeded_node_vector = {}
            if nodes[i].block != None:
                for line in str(nodes[i].block.disassembly).splitlines():
                    instruction = line.split()[1]
                    try:
                        index = in_set[instruction]
                        if index in embeded_node_vector.keys():
                            embeded_node_vector[index] += 1
                        else:
                            embeded_node_vector[index] = 1
                    except:
                        print("\'" + instruction + "\' " +
                            "was not found as a valid instruction. You should consider adding this.")
                        failed_instructions.add(instruction)

            # Print the embeded node vector
            for index, count in embeded_node_vector.items():
                file.write(str(index) + ":" + str(count) + " ")
            file.write("\n")
   
    except Exception as e:
        print("Failed to process file")
        print("Error: " + str(e))

    processed += 1
    print(cfg.graph)
    print(str((processed/total)*100) + "% " + "done")

# Wrap up everything
file.close()
print("Finished!")

# For the second time, notify the user that some instructions failed
if len(failed_instructions) != 0:
    print("The following were not valid instructions. You should consider adding them.")
    print(failed_instructions)
