import os
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Dropout
from spektral.layers import GCNConv, GlobalSumPool, GlobalAvgPool, GlobalMaxPool
from tensorflow.keras.layers import Dense



# Allocate extra memory in the GPU for storing tensors
gpu_options = tf.compat.v1.GPUOptions(per_process_gpu_memory_fraction=0.66)
sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(gpu_options=gpu_options))



class APTGNN(Model):
    def __init__(self):
        super().__init__()
        self.graph_conv_1 = GCNConv(32)
        self.graph_conv_2 = GCNConv(32)
        self.dropout_1 = Dropout(0.5)
        self.pool = GlobalSumPool()
        self.dense_1 = Dense(64, 'relu')
        self.dense_2 = Dense(64, 'relu')
        self.dropout_2 = Dropout(0.5)
        self.dense_3 = Dense(64, 'relu')
        self.dense_4 = Dense(64, 'relu')
        self.dropout_3 = Dropout(0.5)
        self.dense_5 = Dense(10, 'softmax')
    
    def call(self, inputs):
        out = self.graph_conv_1(inputs)
        out = self.graph_conv_2(out)
        out = self.dropout_1(out)
        out = self.pool(out)
        out = self.dense_1(out)
        out = self.dense_2(out)
        out = self.dropout_2(out)
        out = self.dense_3(out)
        out = self.dense_4(out)
        out = self.dropout_3(out)
        out = self.dense_5(out)

        return out



class BinaryGNN(Model):
    def __init__(self):
        super().__init__()
        self.graph_conv_1 = GCNConv(32, activation='relu')
        self.dropout_1 = Dropout(0.5)
        self.pool1 = GlobalAvgPool()
        self.dense_1 = Dense(64, 'relu')
        self.dense_2 = Dense(64, 'relu')
        self.dropout_2 = Dropout(0.5)
        self.dense_3 = Dense(64, 'relu')
        self.dense_4 = Dense(64, 'relu')
        self.dropout_3 = Dropout(0.5)
        self.dense_5 = Dense(64, 'relu')
        self.dense_6 = Dense(64, 'relu')
        self.dropout_4 = Dropout(0.5)
        self.dense_7 = Dense(2, 'softmax')
    
    def call(self, inputs):
        out = self.graph_conv_1(inputs)
        out = self.dropout_1(out)
        pool1 = self.pool1(out)  
        out = self.dense_1(pool1)
        out = self.dense_2(out)
        out = self.dropout_2(out)
        out = self.dense_3(out)
        out = self.dense_4(out)
        out = self.dropout_3(out)
        out = self.dense_5(out)
        out = self.dense_6(out)
        out = self.dropout_4(out)
        out = self.dense_7(out)

        return out