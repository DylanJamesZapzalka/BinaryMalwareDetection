import os
from spektral import data
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers, regularizers
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, Dropout
from spektral.layers import GCNConv, GlobalSumPool, GlobalAvgPool, GlobalMaxPool
from tensorflow.keras.layers import Dense, AlphaDropout
from spektral.datasets import TUDataset
from tensorflow.keras.layers import BatchNormalization, Input
from spektral.data import BatchLoader, SingleLoader, DisjointLoader
import numpy as np
from matplotlib import pyplot as plt



# Allocate extra memory in the GPU for storing tensors
gpu_options = tf.compat.v1.GPUOptions(per_process_gpu_memory_fraction=0.66)
sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(gpu_options=gpu_options))



class APTGNN(Model):
    def __init__(self):
        super().__init__()
        self.graph_conv_1 = GCNConv(934)
        self.graph_conv_2 = GCNConv(934)
        self.dropout_1 = Dropout(0.5)
        self.pool1 = GlobalAvgPool()
        self.pool2 = GlobalMaxPool()
        self.dense_1 = Dense(1024, 'relu')
        self.dense_2 = Dense(1024, 'relu')
        self.dense_3 = Dense(256, 'relu')
        self.dense_4 = Dense(256, 'relu')
        self.dense_5 = Dense(10, 'softmax')
    
    def call(self, inputs):
        x, a, _ = inputs
        out = self.graph_conv_1([x, a])
        out = self.graph_conv_2([out, a])
        out = self.dropout_1(out)
        pool1 = tf.cast(self.pool1(out), tf.float32)
        pool2 = tf.cast(self.pool2(out), tf.float32)
        out = tf.concat([pool1, pool2], axis=1)
        out = self.dense_1(out)
        out = self.dense_2(out)
        out = self.dense_3(out)
        out = self.dense_4(out)
        out = self.dense_5(out)

        return out



class BinaryGNN(Model):
    def __init__(self, n_hidden, n_labels):
        super().__init__()
        self.graph_conv_1 = GCNConv(n_hidden)
        self.dropout_1 = Dropout(0.5)
        self.pool = GlobalSumPool()
        self.dense_1 = Dense(64, 'relu')
        self.dense_2 = Dense(64, 'relu')
        self.dropout_2 = Dropout(0.5)
        self.dense_3 = Dense(64, 'relu')
        self.dense_4 = Dense(64, 'relu')
        self.dropout_3 = Dropout(0.5)
        self.dense_5 = Dense(n_labels, 'softmax')
    
    def call(self, inputs):
        out = self.graph_conv_1(inputs)
        out = self.dropout_1(out)
        out = self.pool(out)
        out = self.dense_1(out)
        out = self.dense_2(out)
        out = self.dropout_2(out)
        out = self.dense_3(out)
        out = self.dense_4(out)
        out = self.dropout_3(out)
        out = self.dense_5(out)

        return out