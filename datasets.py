import numpy as np
import os
from scipy.sparse import coo_matrix, save_npz, load_npz
from spektral.data import Dataset, Graph
from zipfile import ZipFile



# Method to extract and download the the data to the users .spektral directory
def processDataset(dataset, num_features, path):
    # Used to count how many examples have been processed
    processed = 0

    # Used to count how many families have been processed
    processed_families = 0

    # Number of different labels (families)
    num_labels = len(os.listdir(dataset))

    # Process each family (zip file) in the dataset
    for dataset_zip in os.listdir(dataset):
        # Get zip file of the family
        family = os.fsdecode(dataset_zip)

        # Get the label for the family
        y = np.zeros(num_labels)
        y[processed_families] = 1
        processed_families += 1

        # Open the families zip file and process each text file
        with ZipFile(dataset + family) as family_zip:
            with family_zip.open(family[0:-3] + "txt") as file:
                for line in file:

                    # Number of nodes in the graph
                    num_nodes = int(file.readline().decode('utf-8'))

                    # Get the adjacency matrix for the graph
                    rows = file.readline().decode('utf-8').replace('\n','')
                    cols = file.readline().decode('utf-8').replace('\n','')
                    rows = np.array(rows[0:-1].split(' '), dtype=int)
                    cols = np.array(cols[0:-1].split(' '), dtype=int)
                    weights = np.ones(len(rows))
                    a = coo_matrix((weights, (rows, cols)), shape=(num_nodes, num_nodes))

                    # Get the feature vectors for the nodes of the graph
                    x = np.zeros((num_nodes, num_features))
                    for j in range(num_nodes):
                        features = file.readline().decode('utf-8')[0:-2]
                        if features == '':
                            continue
                        else:
                            features = [k.split(':') for k in features.split(' ')]
                            for k in features:
                                x[j,int(k[0])] = int(k[1])

                    # Create and store the graph to the file
                    filename_features = os.path.join(path, f'graph_features_{processed}.npz')
                    filename_adjacency = os.path.join(path, f'graph_adjacency_{processed}.npz')
                    np.savez(filename_features, x=x, y=y)
                    save_npz(filename_adjacency, a)
                    processed += 1

        print("Processed " + str(processed) + " graphs.")
    
    print("Processed " + str(processed) + " graphs.")



# Dataset containing data extracted from malicious and benign binaries
class BinaryDataSet(Dataset):
    def __init__(self, **kwargs):
        self.num_features = 775
        self.size = 1571

        super().__init__(**kwargs)

    def download(self):
        # Create the directory
        os.mkdir(self.path)
        # Process the dataset
        processDataset('processed_data/gnn_data_binary/', self.num_features, self.path)

    def read(self):
        # Return a list of Graph objects
        output = []
        for i in range(self.size):
            data_features = np.load(os.path.join(self.path, f'graph_features_{i}.npz'), allow_pickle=True)
            data_adjacency = load_npz(os.path.join(self.path, f'graph_adjacency_{i}.npz'))
            graph = Graph(x=data_features['x'], a=data_adjacency, y=data_features['y'])
            output.append(graph)
        return output



# Dataset containing data extracted from malicious binaries from ten different authors
class APTDataSet(Dataset):
    def __init__(self,  batch, **kwargs):
        self.num_features = 934
        self.size = 2609
        self.batch = batch

        super().__init__(**kwargs)

    def download(self):
        # Create the directory
        os.mkdir(self.path)
        # Process the dataset
        processDataset('processed_data/gnn_data_apt/', self.num_features, self.path)

    def read(self):
        # Return a list of Graph objects
        output = []
        for i in self.batch:
            data_features = np.load(os.path.join(self.path, f'graph_features_{i}.npz'), allow_pickle=True)
            data_adjacency = load_npz(os.path.join(self.path, f'graph_adjacency_{i}.npz'))
            graph = Graph(x=data_features['x'], a=data_adjacency, y=data_features['y'])
            output.append(graph)
        return output